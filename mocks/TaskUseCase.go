// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	Domain "example/go-clean-architecture/Domain"

	mock "github.com/stretchr/testify/mock"
)

// TaskUseCase is an autogenerated mock type for the TaskUseCase type
type TaskUseCase struct {
	mock.Mock
}

// AddNewTask provides a mock function with given fields: ctx, task
func (_m *TaskUseCase) AddNewTask(ctx context.Context, task Domain.Task) (Domain.Task, error) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for AddNewTask")
	}

	var r0 Domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Domain.Task) (Domain.Task, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Domain.Task) Domain.Task); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Get(0).(Domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, Domain.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTaskById provides a mock function with given fields: ctx, taskId
func (_m *TaskUseCase) DeleteTaskById(ctx context.Context, taskId string) error {
	ret := _m.Called(ctx, taskId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTaskById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, taskId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTasks provides a mock function with given fields: ctx
func (_m *TaskUseCase) GetAllTasks(ctx context.Context) ([]Domain.Task, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []Domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Domain.Task, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Domain.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByID provides a mock function with given fields: ctx, taskId
func (_m *TaskUseCase) GetTaskByID(ctx context.Context, taskId string) (Domain.Task, error) {
	ret := _m.Called(ctx, taskId)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 Domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (Domain.Task, error)); ok {
		return rf(ctx, taskId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) Domain.Task); ok {
		r0 = rf(ctx, taskId)
	} else {
		r0 = ret.Get(0).(Domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, taskId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTaskById provides a mock function with given fields: ctx, task, taskId
func (_m *TaskUseCase) ModifyTaskById(ctx context.Context, task Domain.Task, taskId string) (Domain.Task, error) {
	ret := _m.Called(ctx, task, taskId)

	if len(ret) == 0 {
		panic("no return value specified for ModifyTaskById")
	}

	var r0 Domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Domain.Task, string) (Domain.Task, error)); ok {
		return rf(ctx, task, taskId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Domain.Task, string) Domain.Task); ok {
		r0 = rf(ctx, task, taskId)
	} else {
		r0 = ret.Get(0).(Domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, Domain.Task, string) error); ok {
		r1 = rf(ctx, task, taskId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskUseCase creates a new instance of TaskUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskUseCase {
	mock := &TaskUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
